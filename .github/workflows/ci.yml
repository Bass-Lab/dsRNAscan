name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-install:
    name: Test Install - ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        include:
          # Test oldest and newest Python on Windows
          - os: windows-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.11'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Display system info
      run: |
        python --version
        python -c "import platform; print(f'Platform: {platform.system()} {platform.machine()}')"
    
    - name: Upgrade pip
      run: |
        python -m pip install --upgrade pip setuptools wheel
    
    - name: Install build tools
      run: |
        pip install build
    
    - name: Build package
      run: |
        python -m build
    
    - name: Install from wheel
      run: |
        pip install dist/dsrnascan-*.whl
    
    - name: Verify installation
      run: |
        python -c "import dsRNAscan; print('✓ Import successful')"
        dsrnascan --help
        dsrnascan --version
    
    - name: Test with sample data
      run: |
        echo ">test_seq" > test.fasta
        echo "GGGGGGGGGGAAAAAAAAAAAAAACCCCCCCCCC" >> test.fasta
        dsrnascan test.fasta -w 100 -s 50 --score 15 -c 1
    
    - name: Check for output files
      run: |
        python -c "
        import os
        import glob
        
        # Check if output directory was created
        dirs = glob.glob('dsrnascan_*')
        if not dirs:
            print('❌ No output directory found')
            exit(1)
        
        print(f'✓ Output directory found: {dirs[0]}')
        
        # Check for result files
        results = glob.glob(os.path.join(dirs[0], '*_merged_results.txt'))
        if results:
            print(f'✓ Results file found: {results[0]}')
        else:
            print('❌ No results file found')
            exit(1)
        
        # Check for BP file
        bp_files = glob.glob(os.path.join(dirs[0], '*.dsRNApredictions.bp'))
        if bp_files:
            print(f'✓ BP file found: {bp_files[0]}')
        else:
            print('❌ No BP file found')
            exit(1)
        "
    
    - name: Test einverted binary
      run: |
        python -c "
        import os
        import sys
        import platform
        import subprocess
        
        # Try to find einverted
        try:
            import dsRNAscan
            tools_dir = os.path.join(os.path.dirname(dsRNAscan.__file__), '..', 'tools')
            einverted_path = os.path.join(tools_dir, 'einverted')
            
            if os.path.exists(einverted_path):
                print(f'✓ einverted found at: {einverted_path}')
                
                # Check if executable
                if os.access(einverted_path, os.X_OK):
                    print('✓ einverted is executable')
                    
                    # Try to run it
                    try:
                        result = subprocess.run([einverted_path, '-version'], 
                                              capture_output=True, text=True, timeout=5)
                        if 'EMBOSS' in result.stdout:
                            print('✓ einverted runs successfully')
                        else:
                            print('⚠ einverted runs but unexpected output')
                    except Exception as e:
                        print(f'⚠ Could not run einverted: {e}')
                else:
                    print('❌ einverted is not executable')
                    sys.exit(1)
            else:
                print(f'⚠ einverted not found (may need compilation on {platform.system()})')
        except Exception as e:
            print(f'Error checking einverted: {e}')
            sys.exit(1)
        "

  test-direct-install:
    name: Test Direct GitHub Install
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install directly from GitHub
      run: |
        pip install git+https://github.com/${{ github.repository }}.git@${{ github.sha }}
    
    - name: Test installation
      run: |
        dsrnascan --help
        python -c "import dsRNAscan; print('Direct install successful')"

  test-development-install:
    name: Test Development Install
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install in development mode
      run: |
        pip install -e .
    
    - name: Run tests
      run: |
        dsrnascan --help
        echo ">test" > test.fa
        echo "GGGGGGGGGGAAAAAAAAAAAAAACCCCCCCCCC" >> test.fa
        dsrnascan test.fa -w 100 -s 50 --score 15 -c 1

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install linting tools
      run: |
        pip install flake8 black mypy
    
    - name: Check with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 dsRNAscan.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 dsRNAscan.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Check formatting with black
      run: |
        black --check --diff dsRNAscan.py || true
      continue-on-error: true