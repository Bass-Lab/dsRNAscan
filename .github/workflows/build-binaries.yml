name: Build Platform Binaries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-binaries:
    name: Build ${{ matrix.os }} binary
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            platform: linux_x86_64
            arch: x86_64
            
          # macOS ARM64 (M1/M2)
          - os: macos-latest
            platform: macos_arm64
            arch: arm64
            
          # macOS x86_64 (Intel)
          - os: macos-13  # Last Intel-based runner
            platform: macos_x86_64
            arch: x86_64
            
          # Windows x86_64
          - os: windows-latest
            platform: windows_x86_64
            arch: x86_64
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up build environment (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc make wget patch
    
    - name: Set up build environment (macOS)
      if: runner.os == 'macOS'
      run: |
        # Xcode command line tools should be pre-installed
        echo "macOS build tools ready"
    
    - name: Set up build environment (Windows)
      if: runner.os == 'Windows'
      run: |
        # Install MinGW
        choco install mingw -y
        echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" >> $GITHUB_PATH
    
    - name: Download EMBOSS source
      run: |
        wget ftp://emboss.open-bio.org/pub/EMBOSS/EMBOSS-6.6.0.tar.gz || \
        curl -O ftp://emboss.open-bio.org/pub/EMBOSS/EMBOSS-6.6.0.tar.gz
        tar -xzf EMBOSS-6.6.0.tar.gz
      shell: bash
    
    - name: Apply G-U wobble patch
      working-directory: EMBOSS-6.6.0
      run: |
        # Create patch inline (or use patch file from repo if exists)
        if [ -f ../dsrnascan/emboss_gu_patch.patch ]; then
          patch -p1 < ../dsrnascan/emboss_gu_patch.patch
        else
          # Apply patch directly to einverted.c
          cd emboss
          sed -i.bak 's/if(ajBaseAlphacharCompare(p1\[j\], p2\[k\]))/if(ajBaseAlphacharCompare(p1[j], p2[k]) || \
            (p1[j] == '\''G'\'' \&\& p2[k] == '\''T'\'') || (p1[j] == '\''T'\'' \&\& p2[k] == '\''G'\'') || \
            (p1[j] == '\''g'\'' \&\& p2[k] == '\''t'\'') || (p1[j] == '\''t'\'' \&\& p2[k] == '\''g'\''))/' einverted.c
        fi
      shell: bash
    
    - name: Configure EMBOSS (Unix-like)
      if: runner.os != 'Windows'
      working-directory: EMBOSS-6.6.0
      run: |
        ./configure --without-x --disable-shared --without-pngdriver --without-pdf --without-plplot
      shell: bash
    
    - name: Configure EMBOSS (Windows)
      if: runner.os == 'Windows'
      working-directory: EMBOSS-6.6.0
      run: |
        # Windows needs special configure
        ./configure --host=x86_64-w64-mingw32 --without-x --disable-shared --without-pngdriver --without-pdf --without-plplot
      shell: bash
    
    - name: Build einverted
      working-directory: EMBOSS-6.6.0
      run: |
        # Build required libraries
        make -C ajax/core || echo "ajax/core done"
        make -C ajax/acd || echo "ajax/acd done"
        make -C ajax/ajaxdb || echo "ajax/ajaxdb done"
        make -C nucleus || echo "nucleus done"
        
        # Build einverted
        cd emboss
        make einverted
      shell: bash
    
    - name: Prepare binary
      run: |
        mkdir -p artifacts
        if [ -f "EMBOSS-6.6.0/emboss/einverted" ]; then
          cp EMBOSS-6.6.0/emboss/einverted artifacts/einverted_${{ matrix.platform }}
        elif [ -f "EMBOSS-6.6.0/emboss/einverted.exe" ]; then
          cp EMBOSS-6.6.0/emboss/einverted.exe artifacts/einverted_${{ matrix.platform }}.exe
        fi
        chmod +x artifacts/* 2>/dev/null || true
        ls -la artifacts/
      shell: bash
    
    - name: Test binary
      run: |
        # Create test sequence
        echo ">test" > test.fasta
        echo "GGGGGGGGGGGGGGGGNNNNNNNNNTTTTTTTTTTTTTTTT" >> test.fasta
        
        # Test einverted
        if [ -f "artifacts/einverted_${{ matrix.platform }}" ]; then
          ./artifacts/einverted_${{ matrix.platform }} -sequence test.fasta -outfile test.out || echo "Test run"
        elif [ -f "artifacts/einverted_${{ matrix.platform }}.exe" ]; then
          ./artifacts/einverted_${{ matrix.platform }}.exe -sequence test.fasta -outfile test.out || echo "Test run"
        fi
        
        # Check for G-U pairing
        if [ -f test.out ]; then
          cat test.out
          echo "Binary test completed"
        fi
      shell: bash
    
    - name: Upload binary artifact
      uses: actions/upload-artifact@v3
      with:
        name: einverted-${{ matrix.platform }}
        path: artifacts/*
    
  # Collect all binaries into one artifact
  collect-binaries:
    name: Collect all binaries
    runs-on: ubuntu-latest
    needs: build-binaries
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: platform_binaries
    
    - name: Organize binaries
      run: |
        mkdir -p dsrnascan/tools/platform_binaries
        
        # Move all binaries to the correct location
        find platform_binaries -type f -name 'einverted*' -exec cp {} dsrnascan/tools/platform_binaries/ \;
        
        # List what we have
        echo "Collected binaries:"
        ls -la dsrnascan/tools/platform_binaries/
    
    - name: Upload combined artifact
      uses: actions/upload-artifact@v3
      with:
        name: all-platform-binaries
        path: dsrnascan/tools/platform_binaries/*
    
    - name: Create release (if tagged)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dsrnascan/tools/platform_binaries/*
        body: |
          Platform binaries for dsRNAscan
          
          - Linux x86_64
          - macOS ARM64 (M1/M2)
          - macOS x86_64 (Intel)
          - Windows x86_64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}