name: CI Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    name: Test - ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        include:
          # Test one version on Windows
          - os: windows-latest
            python-version: '3.10'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
    
    - name: Build einverted from EMBOSS (Unix)
      if: runner.os != 'Windows'
      run: |
        # Use the existing compile script which handles everything
        chmod +x compile_patched_einverted.sh
        ./compile_patched_einverted.sh
        
        # Verify the binary was created
        ls -la dsrnascan/tools/einverted*
        
        # Clean up to save space
        rm -rf EMBOSS-6.6.0 EMBOSS-6.6.0.tar.gz
    
    - name: Build einverted (Windows)
      if: runner.os == 'Windows'
      run: |
        # For Windows, we'll skip compilation for now
        echo "Windows einverted compilation requires MinGW/MSVC setup"
        echo "Skipping einverted build for Windows - will use fallback"
        mkdir dsrnascan\tools 2>nul || echo "Directory exists"
    
    - name: Build package
      run: python -m build
    
    - name: Install package (Unix)
      if: runner.os != 'Windows'
      run: pip install dist/*.whl
    
    - name: Install package (Windows)
      if: runner.os == 'Windows'
      shell: python
      run: |
        import glob
        import subprocess
        wheels = glob.glob('dist/*.whl')
        if wheels:
            subprocess.run(['pip', 'install', wheels[0]], check=True)
        else:
            raise FileNotFoundError("No wheel file found in dist/")
    
    - name: Test CLI
      run: |
        dsrnascan --help
        dsrnascan --version
    
    - name: Run functional test (Unix)
      if: runner.os != 'Windows'
      run: |
        echo ">test" > test.fasta
        echo "GGGGGGGGGGAAAAAAAAAAAAAACCCCCCCCCC" >> test.fasta
        dsrnascan test.fasta -w 100 -s 50 --score 15 -c 1
    
    - name: Skip functional test (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Skipping functional test - einverted binary not built for Windows"
        echo "Windows users should use WSL or Docker"
    
    - name: Verify output files (Unix)
      if: runner.os != 'Windows'
      shell: python
      run: |
        import glob
        import sys
        
        # Check for output directory
        dirs = glob.glob('dsrnascan_*')
        if not dirs:
            print('ERROR: No output directory created')
            sys.exit(1)
        
        print(f'✓ Output directory: {dirs[0]}')
        
        # Check for results file
        results = glob.glob(f'{dirs[0]}/*_merged_results.txt')
        if not results:
            print('ERROR: No results file created')
            sys.exit(1)
        
        print(f'✓ Results file: {results[0]}')
        print('All tests passed!')

  test-direct-install:
    name: Test Direct Install from Repository
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install from local repository (simulating direct install)
      run: |
        # This simulates a direct install from the repository
        # In a real scenario with a public repo, this would be:
        # pip install git+https://github.com/${{ github.repository }}.git
        pip install .
    
    - name: Test installation
      run: |
        dsrnascan --help
        python -c "import dsrnascan; print('Import successful')"

  build-binaries:
    name: Build einverted binaries for release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux-x86_64
            binary: einverted_linux_x86_64
          - os: macos-13  # Intel
            name: macos-x86_64
            binary: einverted_darwin_x86_64
          - os: macos-14  # Apple Silicon
            name: macos-arm64
            binary: einverted_darwin_arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build einverted from EMBOSS
      run: |
        # Use the compile script - it creates platform-specific binaries
        chmod +x compile_patched_einverted.sh
        ./compile_patched_einverted.sh
        
        # The script creates the platform-specific binary already
        # Just verify it exists
        ls -la dsrnascan/tools/${{ matrix.binary }}
        
        # Clean up
        rm -rf EMBOSS-6.6.0 EMBOSS-6.6.0.tar.gz
        
    - name: Test binary
      run: |
        dsrnascan/tools/${{ matrix.binary }} -help || echo "Binary test completed"
        
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: einverted-${{ matrix.name }}
        path: dsrnascan/tools/${{ matrix.binary }}
        retention-days: 90