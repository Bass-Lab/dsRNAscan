name: Test Installation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test-platforms:
    name: Test on ${{ matrix.os }} Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        exclude:
          # Skip some combinations to save CI time
          - os: windows-latest
            python-version: '3.7'
          - os: windows-latest
            python-version: '3.8'

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Build package
      run: python -m build
    
    - name: Install package
      run: pip install dist/dsrnascan-*.whl
    
    - name: Test import
      run: python -c "import dsRNAscan; print('Import successful')"
    
    - name: Test CLI
      run: |
        dsrnascan --help
        dsrnascan --version
    
    - name: Run functional test
      run: |
        echo ">test" > test.fasta
        echo "GGGGGGGGGGAAAAAAAAAAAAAACCCCCCCCCC" >> test.fasta
        dsrnascan test.fasta -w 100 -s 50 --score 15 -c 1
    
    - name: Check einverted binary
      run: |
        python -c "
        import os
        import platform
        import dsRNAscan
        
        tools_dir = os.path.join(os.path.dirname(dsRNAscan.__file__), '..', 'tools')
        einverted_path = os.path.join(tools_dir, 'einverted')
        
        print(f'Platform: {platform.system()} {platform.machine()}')
        print(f'Checking for einverted at: {einverted_path}')
        
        if os.path.exists(einverted_path):
            print('✓ einverted binary found')
            if os.access(einverted_path, os.X_OK):
                print('✓ einverted is executable')
            else:
                print('✗ einverted is not executable')
                exit(1)
        else:
            print('✗ einverted binary not found')
            # This is expected on platforms without precompiled binaries
            print('Note: This platform may need manual einverted compilation')
        "
    
    - name: Upload artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: failed-build-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          dist/
          *.log

  test-docker:
    name: Test Docker installation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build and test in Docker
      run: |
        docker build -f Dockerfile.test --target ubuntu-test -t dsrnascan-test .
    
    - name: Verify Docker test passed
      run: |
        docker run --rm dsrnascan-test dsrnascan --help

  test-conda:
    name: Test Conda installation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: 3.9
        miniconda-version: "latest"
    
    - name: Build conda package
      shell: bash -l {0}
      run: |
        conda install conda-build
        conda build conda-recipe
    
    - name: Install and test
      shell: bash -l {0}
      run: |
        conda install --use-local dsrnascan
        dsrnascan --help

  publish-pypi:
    name: Publish to PyPI
    needs: [test-platforms, test-docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Build package
      run: |
        pip install build
        python -m build
    
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine upload --repository testpypi dist/*
    
    - name: Test installation from Test PyPI
      run: |
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ dsrnascan
        dsrnascan --help
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*