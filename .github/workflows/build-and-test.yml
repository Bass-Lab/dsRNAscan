name: Build and Test with Binaries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-binaries:
    name: Build einverted - ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: Linux x86_64
            os: ubuntu-latest
            arch: x86_64
            binary: einverted_linux_x86_64
          - name: macOS x86_64
            os: macos-13
            arch: x86_64
            binary: einverted_darwin_x86_64
          - name: macOS ARM64
            os: macos-14
            arch: arm64
            binary: einverted_darwin_arm64
          - name: Windows x86_64
            os: windows-latest
            arch: x86_64
            binary: einverted_windows_x86_64.exe
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup build environment (Windows)
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          base-devel
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-make
          patch
          wget
          tar
    
    - name: Download EMBOSS source
      if: runner.os != 'Windows'
      run: |
        wget -q https://github.com/EMBOSS/EMBOSS/archive/refs/tags/rel-6-6-0.tar.gz -O EMBOSS-6.6.0.tar.gz
        tar -xzf EMBOSS-6.6.0.tar.gz
        mv EMBOSS-rel-6-6-0 EMBOSS-6.6.0
    
    - name: Download EMBOSS source (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        wget -q https://github.com/EMBOSS/EMBOSS/archive/refs/tags/rel-6-6-0.tar.gz -O EMBOSS-6.6.0.tar.gz
        tar -xzf EMBOSS-6.6.0.tar.gz
        mv EMBOSS-rel-6-6-0 EMBOSS-6.6.0
    
    - name: Build einverted (Unix)
      if: runner.os != 'Windows'
      run: |
        mkdir -p dsrnascan/tools
        cd EMBOSS-6.6.0
        patch -p1 < ../einverted.patch
        ./configure --prefix=$PWD/../build --without-x --without-pngdriver
        make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)
        cd emboss
        make einverted
        cp .libs/einverted ../../dsrnascan/tools/${{ matrix.config.binary }}
        chmod +x ../../dsrnascan/tools/${{ matrix.config.binary }}
    
    - name: Build einverted (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        mkdir -p dsrnascan/tools
        cd EMBOSS-6.6.0
        patch -p1 < ../einverted.patch
        ./configure --prefix=$PWD/../build --without-x --without-pngdriver
        make -j$(nproc)
        cd emboss
        make einverted
        cp einverted.exe ../../dsrnascan/tools/${{ matrix.config.binary }}
    
    - name: Verify binary
      if: runner.os != 'Windows'
      run: |
        file dsrnascan/tools/${{ matrix.config.binary }}
        dsrnascan/tools/${{ matrix.config.binary }} -help | head -5 || true
    
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.config.name }}
        path: dsrnascan/tools/${{ matrix.config.binary }}
        retention-days: 7

  test-with-binaries:
    name: Test - ${{ matrix.os }} - Python ${{ matrix.python-version }}
    needs: build-binaries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download all binaries
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Install binaries
      run: |
        mkdir -p dsrnascan/tools
        find artifacts -type f \( -name "einverted*" -o -name "*.exe" \) -exec cp {} dsrnascan/tools/ \; 2>/dev/null || true
        ls -la dsrnascan/tools/ || dir dsrnascan\tools
    
    - name: Set executable permissions (Unix)
      if: runner.os != 'Windows'
      run: |
        chmod +x dsrnascan/tools/einverted* || true
        # Create symlink to appropriate binary
        cd dsrnascan/tools
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          ln -sf einverted_linux_x86_64 einverted
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          if [[ $(uname -m) == "arm64" ]]; then
            ln -sf einverted_darwin_arm64 einverted
          else
            ln -sf einverted_darwin_x86_64 einverted
          fi
        fi
        cd ../..
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel pytest
    
    - name: Build package
      run: python -m build
    
    - name: Install package
      run: |
        pip install dist/*.whl
    
    - name: Test CLI
      run: |
        dsrnascan --help
        dsrnascan --version
    
    - name: Run functional test
      if: runner.os != 'Windows'
      run: |
        echo ">test" > test.fasta
        echo "GGGGGGGGGGAAAAAAAAAAAAAACCCCCCCCCC" >> test.fasta
        dsrnascan test.fasta -w 100 -s 50 --score 15 -c 1
        ls -la dsrnascan_*/ || true
    
    - name: Run functional test (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        echo ^>test > test.fasta
        echo GGGGGGGGGGAAAAAAAAAAAAAACCCCCCCCCC >> test.fasta
        dsrnascan test.fasta -w 100 -s 50 --score 15 -c 1
        dir dsrnascan_*

  package-binaries:
    name: Package all binaries
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: build-binaries
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all binaries
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Organize binaries
      run: |
        mkdir -p dsrnascan/tools
        find artifacts -type f \( -name "einverted*" -o -name "*.exe" \) -exec cp {} dsrnascan/tools/ \;
        chmod +x dsrnascan/tools/einverted* || true
        ls -la dsrnascan/tools/
        
    - name: Create archive
      run: |
        tar -czf einverted-binaries-all-platforms.tar.gz dsrnascan/tools/
    
    - name: Upload to release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./einverted-binaries-all-platforms.tar.gz
        asset_name: einverted-binaries-all-platforms.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload as artifact (manual trigger)
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: einverted-all-platforms
        path: einverted-binaries-all-platforms.tar.gz
        retention-days: 30